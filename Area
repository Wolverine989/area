from PIL import Image
from numpy import asarray
import numpy as np
import matplotlib.pyplot as plt
import os.path
import os
import math

def process_img(name): # convert to greyscale and crop

    #   Full Window C&T
    left = 1100
    right = 1730
    top = 1230
    bottom = 1430
    #
    ## odd rectangular casette

    left = 1100
    right = 1730
    top = 1260
    bottom = 1380

    img = Image.open(name)
    img = img.crop((left, top, right, bottom)) 
    img = img.convert('L')

    directory='temp/'
    if not os.path.exists(directory):
            os.makedirs(directory)
            print("created "+ directory)

    img.save(directory+"temp.png")
    img.close()

    return observe(name)

def observe(image):
    # img= Image.open('temp/'+image+'.png') 
    print("observe summoned")
    img= Image.open('temp/'+"temp.png") 
    numpydata = asarray(img)
    a_data = np.average(numpydata, axis=0)
    img.close()

    #Pull to zero
    min_value = min(a_data)
    for i in range(len(a_data)):
        a_data[i] -= min_value
    a_data = slopefix(a_data) #fixx slope
    a_data = smooth(a_data) # smooothen 

    clip_value = 10
    clip = [20 for i in range(len(a_data))]
    for i in range(len(a_data)):
        if a_data[i]>clip_value:
            clip[i] = 50

     ##
    dervi = [0 for i in range(len(clip))]
    for i in range(len(clip)):
        if i:
            dervi[i] = clip[i]-clip[i-1]
    ##
    get_indexes = lambda x, xs : [i for (y,i) in zip(xs, range(len(xs))) if x==y ]
    get_width = lambda x: str(float(5/300)*x)+" mm"

    max_ = max(dervi)
    max_c = dervi.count(max_)
    max_ = get_indexes(max_, dervi)
    
    print(max_c)

    if max_c >= 1 :
        
        print("a")
        left = 1100
        right = 1360
        top = 1230
        bottom = 1430

        left = 1100
        right = 1360
        top = 1260
        bottom = 1380
        
        img= Image.open('temp/'+"temp.png")
        

        img = Image.open(temp)
        img = img.crop((left, top, right, bottom)) 
        #img = img.convert('L')
        directory='temp2/'
        if not os.path.exists(directory):
            os.makedirs(directory)
            print("created "+ directory)
        img.save(directory+"temp2.png")
        
        img= Image.open('temp2/'+"temp2.png")
        numpydata = asarray(img)
        a_data = np.average(numpydata, axis=0)
        img.close()
      
    
        max_t=("{:0.3f}".format(max(a_data)))
    
        if float(max_t) > 1.1:
            return (float(max_t))
        
        else:
            max_t=0
            return float(max_t)

    
        data_graph= "\n T LINE :" + str(max_t)
        plt.plot(a_data, label=data_graph)
    
    #plt.legend()
    #plt.show()
    #return ret
        return (float(max_t))

def slopefix(data):
    leng = len(data)
    left  = min(data[0:50])
    right = min(data[-50:-1])
    fixer = (left-right)/len(data)
    fixer = [i*fixer for i in range(len(data))]
    fixer.reverse()

    for i in range(len(data)):
        data[i] -= fixer[i]

    return data


def smooth(data):
    for i in range(20):
        for i in range(len(data)-1):
            if i:
                avg = (data[i-1]+data[i+1])/2
                data[i] += avg
                data[i] /= 2

    #for i in range(len(data)): data[i]-=10
    return data

